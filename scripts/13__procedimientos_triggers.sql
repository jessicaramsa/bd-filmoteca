USE FILMOTECA;
GO

/*
  PROCEDIMIENTO ALMACENADO SP_INSERT_PELICULA
  Insertar PELICULA, recibe los parametros:
  NUM_PEL, T_ORIGINAL, T_TRADUCIDO, ANIO_EDICION, CATEGORIA,
  DURACION, PRESUPUESTO, CALIFICACION, GUIONISTA, SOPORTE
*/
CREATE PROCEDURE SP_INSERT_PELICULA
@NUM_PEL BIGINT,
@T_ORIGINAL VARCHAR(255),
@T_TRADUCIDO VARCHAR(255),
@ANIO_EDICION INT,
@CATEGORIA VARCHAR(100),
@DURACION TIME,
@PRESUPUESTO FLOAT,
@CALIFICACION FLOAT,
@GUIONISTA VARCHAR(255),
@SOPORTE BIGINT
AS
  INSERT INTO PELICULAS VALUES(
    @NUM_PEL, @T_ORIGINAL, @T_TRADUCIDO, @ANIO_EDICION,
    @CATEGORIA, @DURACION, @PRESUPUESTO, @CALIFICACION, @GUIONISTA, @SOPORTE
  )
GO

-- Llamada a procedimiento
EXEC SP_INSERT_PELICULA
  @NUM_PEL = '120',
  @T_ORIGINAL = 'La ouija',
  @T_TRADUCIDO = 'La ouija',
  @ANIO_EDICION = 2008,
  @CATEGORIA = 'Miedo',
  @DURACION = '02:10:00.0000000',
  @PRESUPUESTO = 5000000.00,
  @CALIFICACION = 8.0,
  @GUIONISTA = 'WVS84DTQ1YS',
  @SOPORTE = 2009
;
GO

/*
  PROCEDIMIENTO ALMACENADO SP_UPDATE_PELICULA
  Actualizar PELICULA, recibe los parametros:
  NUM_PEL, T_ORIGINAL, T_TRADUCIDO, ANIO_EDICION, CATEGORIA,
  DURACION, PRESUPUESTO, CALIFICACION, GUIONISTA, SOPORTE
*/
CREATE PROCEDURE SP_UPDATE_PELICULA
@NUM_PEL BIGINT,
@T_ORIGINAL VARCHAR(255),
@T_TRADUCIDO VARCHAR(255),
@ANIO_EDICION INT,
@CATEGORIA VARCHAR(100),
@DURACION TIME,
@PRESUPUESTO FLOAT,
@CALIFICACION FLOAT,
@GUIONISTA VARCHAR(255),
@SOPORTE BIGINT
AS
  UPDATE PELICULAS
  SET
    T_ORIGINAL = @T_ORIGINAL,
    T_TRADUCIDO = @T_TRADUCIDO,
    ANIO_EDICION = @ANIO_EDICION,
    CATEGORIA = @CATEGORIA,
    DURACION = @DURACION,
    PRESUPUESTO = @PRESUPUESTO,
	CALIFICACION = @CALIFICACION,
    GUIONISTA = @GUIONISTA,
    SOPORTE = @SOPORTE
  WHERE NUM_PEL = @NUM_PEL
GO

-- Llamada a procedimiento
EXEC SP_UPDATE_PELICULA
  @NUM_PEL = 120,
  @T_ORIGINAL = 'La ouija',
  @T_TRADUCIDO = 'La ouija',
  @ANIO_EDICION = 2008,
  @CATEGORIA = 'Miedo',
  @DURACION = '02:10:00.0000000',
  @PRESUPUESTO = 5000000.00,
  @CALIFICACION = 5.0,
  @GUIONISTA = 'VSO38OMJ5YQ',
  @SOPORTE = 4155
;
GO

/*
  PROCEDIMIENTO ALMACENADO SP_DELETE_PELICULA
  ELIMINAR PELICULA, recibe el parametro NUM_PEL
*/
CREATE PROCEDURE SP_DELETE_PELICULA
@NUM_PEL BIGINT
AS
  DELETE FROM PELICULAS WHERE NUM_PEL = @NUM_PEL
GO

-- Llamada a procedimiento
EXEC SP_DELETE_PELICULA @NUM_PEL = 9;
GO

/*
  PROCEDIMIENTO ALMACENADO SP_INSERT_ALQUILA_P
  Insertar ALQUILA_P Recibe dos parametros de entrada, NUM_PEL y SOCIO
*/
CREATE PROCEDURE SP_INSERT_ALQUILA_P
@NUM_PEL BIGINT, @SOCIO VARCHAR(100)
AS
  INSERT INTO ALQUILA_P VALUES(@NUM_PEL, @SOCIO)
GO

-- Llamada a procedimiento
EXEC SP_INSERT_ALQUILA_P @NUM_PEL = 1, @SOCIO = 'GGB64EOB3YH';
GO

/*
  PROCEDIMIENTO ALMACENADO SP_INSERT_ALQUILA_B
  Insertar ALQUILA_B Recibe dos parametros de entrada, B_SONORA, SOCIO
*/
CREATE PROCEDURE SP_INSERT_ALQUILA_B
@B_SONORA VARCHAR(255), @SOCIO VARCHAR(100)
AS
  INSERT INTO ALQUILA_B VALUES(@B_SONORA, @SOCIO)
GO

-- Llamada a procedimiento
EXEC SP_INSERT_ALQUILA_B @B_SONORA = 'UMW78NIW5YL', @SOCIO = 'GGB64EOB3YH';
GO

/*
  PROCEDIMIENTO ALMACENADO SP_MODIFICAR_SOCIO
  Modificar SOCIO
*/
CREATE PROCEDURE SP_MODIFICAR_SOCIO
@DNI VARCHAR(100),
@APELLIDOS VARCHAR(255),
@NOMBRE VARCHAR(100),
@DIRECCION VARCHAR(255),
@EDAD INT
AS
  UPDATE SOCIOS
  SET DNI = @DNI,
    APELLIDOS = @APELLIDOS,
    NOMBRE = @NOMBRE,
    DIRECCION = @DIRECCION,
    EDAD = @EDAD
  WHERE DNI = @DNI
GO

-- Llamada a procedimiento
EXEC SP_MODIFICAR_SOCIO
  @DNI ='1',
  @APELLIDOS = 'Becerra',
  @NOMBRE = 'Miguel',
  @DIRECCION = 'Avenida siempre viva',
  @EDAD = 30
;
GO

/*
  PROCEDIMIENTO ALMACENADO SP_ADQUIRIR_ABONOS
  ADQUIRIR ABONOS recibe dos parametros: SOCIO, ABONO
*/
CREATE PROCEDURE SP_ADQUIRIR_ABONOS
@SOCIO VARCHAR(100),
@ABONO VARCHAR(100)
AS
  INSERT INTO ADQUIERE VALUES(@SOCIO, @ABONO)
GO

-- Llamada a procedimiento
EXEC SP_ADQUIRIR_ABONOS @SOCIO = 'TGX35AST0ZV', @ABONO = 'TWY48MYM7SI'
GO

/*
  TRIGGER TG_REVISAR_NOMBRE_SOCIO
  Regalar una ALQUILACION de PELICULA a todos los nuevos SOCIOS
  que tengan NOMBRE = Benita
*/
CREATE TRIGGER TG_REVISAR_NOMBRE_SOCIO
ON SOCIOS
AFTER INSERT, UPDATE
AS
  DECLARE
	@NOMBRE VARCHAR(100),
	@DNI VARCHAR(255)
  SELECT @NOMBRE = ins.NOMBRE FROM inserted ins;
  SELECT @DNI = ins.DNI FROM inserted ins;
  IF (@NOMBRE = 'Benita')
	INSERT INTO ALQUILA_P VALUES(1, @DNI)
GO

/*
  TRIGGER TG_REVISAR_ABONOS
  Evita que se inserten ABONOS duplicados
*/
CREATE TRIGGER TG_REVISAR_ABONOS
ON ABONOS
INSTEAD OF INSERT, UPDATE
AS
BEGIN
  SET NOCOUNT ON;
  INSERT INTO ABONOS(COD_A, DESCRIPCION, N_DIAS, COSTO, CICLO, ANIO)
  SELECT COD_A, DESCRIPCION, N_DIAS, COSTO, CICLO, ANIO
  FROM inserted ins
  WHERE
	ins.COD_A NOT IN(SELECT COD_A FROM ABONOS) AND
	ins.DESCRIPCION LIKE (SELECT DESCRIPCION FROM ABONOS) AND
	ins.N_DIAS NOT IN(SELECT N_DIAS FROM ABONOS) AND
	ins.COSTO NOT IN(SELECT COSTO FROM ABONOS) AND
	ins.CICLO NOT IN(SELECT CICLO FROM ABONOS) AND
	ins.ANIO NOT IN(SELECT ANIO FROM ABONOS);
END
GO
