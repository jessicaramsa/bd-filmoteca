USE master;
GO

/*
  Crear BASE DE DATOS
  ** NOTA IMPORTANTE: el directorio de los archivos
  debe cambiarse de acuerdo al directorio que se tenga
  en la instancia
*/
CREATE DATABASE FILMOTECA ON  PRIMARY 
  (
    NAME = N'FILMOTECA',
	FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\DATA\FILMOTECA.mdf' ,
	SIZE = 10240KB , 
	MAXSIZE = UNLIMITED, 
	FILEGROWTH = 5120KB
  )
  LOG ON 
  (
    NAME = N'FILMOTECA_log', 
	FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL10.SQLEXPRESS\MSSQL\DATA\FILMOTECA_log.ldf' , 
	SIZE = 5120KB , 
	MAXSIZE = 2048GB , 
	FILEGROWTH = 15%
  )
GO

USE FILMOTECA;
GO

CREATE TABLE PARTICIPANTES(
  CODIGO VARCHAR(255) NOT NULL PRIMARY KEY,
  NOMBRE VARCHAR(255) NOT NULL,
  NACIONALIDAD VARCHAR(100),
  F_NACIMIENTO DATE,
  OSCAR INT,
  NOMINACIONES INT,
  TIPO_PRODUCTO VARCHAR(100)
);
GO

CREATE TABLE SOPORTE(
  CODS BIGINT NOT NULL PRIMARY KEY,
  DESCRIPCION TEXT
);
GO

/*
  PELICULAS
  * CONSTRAINT FK_PELICULAS_PARTICIPANTE
    Llave foranea que hace referencia a la relacion con PARTICIPANTES
  * CONSTRAINT FK_PELICULAS_SOPORTE
    Llave foranea que hace referencia a la relacion con SOPORTE
*/
CREATE TABLE PELICULAS(
  NUM_PEL BIGINT NOT NULL PRIMARY KEY,
  T_ORIGINAL VARCHAR(255) NOT NULL,
  T_TRADUCIDO VARCHAR(255) NOT NULL,
  ANIO_EDICION INT,
  CATEGORIA VARCHAR(100),
  DURACION TIME,
  PRESUPUESTO FLOAT,
  CALIFICACION FLOAT,
  GUIONISTA VARCHAR(255) NOT NULL,
  SOPORTE BIGINT NOT NULL,
  CONSTRAINT FK_PELICULAS_PARTICIPANTE FOREIGN KEY(GUIONISTA) REFERENCES PARTICIPANTES(CODIGO),
  CONSTRAINT FK_PELICULAS_SOPORTE FOREIGN KEY(SOPORTE) REFERENCES SOPORTE(CODS)
);
GO

/*
  CONSTRAINT CK_PELICULAS_CALIFICACION
  La CALIFICACION no sera menor a 0 y debe ser mayor a 10
*/
ALTER TABLE PELICULAS ADD CONSTRAINT CK_PELICULAS_CALIFICACION CHECK(CALIFICACION >= 0 AND CALIFICACION <= 10);
GO

/*
  PROTAGONIZA
  * CONSTRAINT PK_PROTAGONISTA
    Llave primaria compuesta por INTERPRETE y NPEL
  * CONSTRAINT FK_PROTAGONIZA_PARTICIPANTE
    Llave foranea que hace referencia a la relacion con PARTICIPANTES
  * CONSTRAINT FK_PROTAGONIZA_PELICULA
    Llave foranea que hace referencia a la relacion con PELICULAS
*/
CREATE TABLE PROTAGONIZA(
  INTERPRETE VARCHAR(255) NOT NULL,
  NPEL BIGINT NOT NULL,
  TIPO_ACTUACION VARCHAR(255),
  CONSTRAINT PK_PROTAGONISTA PRIMARY KEY(INTERPRETE, NPEL),
  CONSTRAINT FK_PROTAGONIZA_PARTICIPANTE FOREIGN KEY(INTERPRETE) REFERENCES PARTICIPANTES(CODIGO),
  CONSTRAINT FK_PROTAGONIZA_PELICULA FOREIGN KEY(NPEL) REFERENCES PELICULAS(NUM_PEL)
);
GO

/*
  DIRIGE
  * CONSTRAINT PK_DIRIGE
    Llave primaria compuesta por DIRECTOR y NPEL
*/
CREATE TABLE DIRIGE(
  DIRECTOR VARCHAR(255) NOT NULL,
  NPEL BIGINT NOT NULL,
  CONSTRAINT PK_DIRIGE PRIMARY KEY(DIRECTOR, NPEL)
);
GO

/*
  Llave foranea FK_DIRIGE_PARTICIPANTE que representa la relacion que tiene con PARTICIPANTES
  Llave foranea FK_DIRIGE_PELICULA que representa la relacion que tiene con PELICULAS
*/
ALTER TABLE DIRIGE ADD CONSTRAINT FK_DIRIGE_PARTICIPANTE FOREIGN KEY(DIRECTOR) REFERENCES PARTICIPANTES(CODIGO);
GO
ALTER TABLE DIRIGE ADD CONSTRAINT FK_DIRIGE_PELICULA FOREIGN KEY(NPEL) REFERENCES PELICULAS(NUM_PEL);
GO

/*
  SOCIOS
  CONSTRAINT CK_SOCIO_EDAD revisa que el socio sea mayor o igual a 13 aÃ±os
*/
CREATE TABLE SOCIOS(
  DNI VARCHAR(100) NOT NULL PRIMARY KEY,
  APELLIDOS VARCHAR(255) NOT NULL,
  NOMBRE VARCHAR(100) NOT NULL,
  DIRECCION VARCHAR(255),
  EDAD INT,
  CONSTRAINT CK_SOCIO_EDAD CHECK (EDAD >= 13)
);
GO

/*
  PRODUCE
  * CONSTRAINT PK_PRODUCE
    Llave primaria compuesta por PRODUCTOR y NPEL
  * CONSTRAINT FK_PRODUCE_PARTICIPANTE
    Llave foranea que hace referencia a la relacion con PARTICIPANTES
  * CONSTRAINT FK_PRODUCE_PELICULA
    Llave foranea que hace referencia a la relacion con PELICULAS
*/
CREATE TABLE PRODUCE(
  PRODUCTOR VARCHAR(255) NOT NULL,
  NPEL BIGINT NOT NULL,
  PORCENTAJE FLOAT,
  CONSTRAINT PK_PRODUCE PRIMARY KEY(PRODUCTOR, NPEL),
  CONSTRAINT FK_PRODUCE_PARTICIPANTE FOREIGN KEY(PRODUCTOR) REFERENCES PARTICIPANTES(CODIGO),
  CONSTRAINT FK_PRODUCE_PELICULA FOREIGN KEY(NPEL) REFERENCES PELICULAS(NUM_PEL)
);
GO

/*
  CICLOS
  * CONSTRAINT PK_CICLOS
    Llave primaria compuesta por NOMBRE y ANIO
*/
CREATE TABLE CICLOS(
  NOMBRE VARCHAR(255) NOT NULL,
  ANIO INT NOT NULL,
  F_INICIO DATE,
  F_FIN DATE
);
GO

/*
  CONSTRAINT PK_CICLOS
  Llave primaria de la tabla CICLOS
*/
ALTER TABLE CICLOS ADD CONSTRAINT PK_CICLOS PRIMARY KEY(NOMBRE, ANIO);
GO

/*
  CONSTRAINT CK_CICLOS_FECHAS
  La F_FIN no puede ser menor a F_INICIO
*/
ALTER TABLE CICLOS ADD CONSTRAINT CK_CICLOS_FECHAS CHECK(F_FIN > F_INICIO);
GO

/*
  ABONOS
  * CONSTRAINT FK_ABONOS_CICLOS_NOMBRE
    Llave foranea que hace referencia a la relacion con CICLOS
  * CONSTRAINT FK_ABONOS_CICLOS_ANIO
    Llave foranea que hace referencia a la relacion con CICLOS
*/
CREATE TABLE ABONOS(
  COD_A VARCHAR(100) NOT NULL PRIMARY KEY,
  DESCRIPCION TEXT NOT NULL,
  N_DIAS INT,
  COSTO FLOAT,
  CICLO VARCHAR(255) NOT NULL,
  ANIO INT NOT NULL,
  CONSTRAINT FK_ABONOS_CICLOS_NOMBRE FOREIGN KEY(CICLO, ANIO) REFERENCES CICLOS(NOMBRE, ANIO)
);
GO

/*
  BANDAS
  * CONSTRAINT FK_BANDAS_PELICULAS
    Llave foranea que hace referencia a la relacion con PELICULAS
  * CONSTRAINT FK_BANDAS_SOPORTE
    Llave foranea que hace referencia a la relacion con SOPORTE
*/
CREATE TABLE BANDAS(
  CODS_BS VARCHAR(255) NOT NULL PRIMARY KEY,
  TITULO VARCHAR(255) NOT NULL,
  TIPO VARCHAR(100),
  PELICULAS BIGINT NOT NULL,
  SOPORTE BIGINT NOT NULL,
  CONSTRAINT FK_BANDAS_PELICULAS FOREIGN KEY(PELICULAS) REFERENCES PELICULAS(NUM_PEL),
  CONSTRAINT FK_BANDAS_SOPORTE FOREIGN KEY(SOPORTE) REFERENCES SOPORTE(CODS)
);
GO

/*
  EMITE
  * CONSTRAINT FK_EMITE_PELICULA
    Llave foranea que hace referencia a la relacion con PELICULAS
  * CONSTRAINT FK_EMITE_CICLO_NOMBRE
    Llave foranea que hace referencia a la relacion con CICLOS
  * CONSTRAINT FK_EMITE_CICLO_ANIO
    Llave foranea que hace referencia a la relacion con CICLOS
*/
CREATE TABLE EMITE(
  PELICULA BIGINT NOT NULL,
  CICLO VARCHAR(255) NOT NULL,
  ANIO INT NOT NULL,
  DIA INT,
  HORA DATETIME,
  CONSTRAINT FK_EMITE_PELICULA FOREIGN KEY(PELICULA) REFERENCES PELICULAS(NUM_PEL),
  CONSTRAINT FK_EMITE_CICLO_NOMBRE FOREIGN KEY(CICLO, ANIO) REFERENCES CICLOS(NOMBRE, ANIO)
);
GO

/*
  ADQUIERE
  * CONSTRAINT FK_ALQUILA_B_BANDA
    Llave foranea que hace referencia a la relacion con BANDAS
  * CONSTRAINT FK_ALQUILA_ABONO
    Llave foranea que hace referencia a la relacion con ABONOS
*/
CREATE TABLE ADQUIERE(
  SOCIO VARCHAR(100) NOT NULL,
  ABONO VARCHAR(100) NOT NULL,
  CONSTRAINT FK_ADQUIERE_SOCIO FOREIGN KEY(SOCIO) REFERENCES SOCIOS(DNI),
  CONSTRAINT FK_ADQUIERE_ABONO FOREIGN KEY(ABONO) REFERENCES ABONOS(COD_A)
);
GO

/*
  ALQUILA_B
  * CONSTRAINT FK_ALQUILA_B_BANDAS
    Llave foranea que hace referencia a la relacion con BANDAS
  * CONSTRAINT FK_ALQUILA_B_SOCIO
    Llave foranea que hace referencia a la relacion con SOCIOS
*/
CREATE TABLE ALQUILA_B(
  B_SONORA VARCHAR(255) NOT NULL,
  SOCIO VARCHAR(100) NOT NULL,
  CONSTRAINT FK_ALQUILA_B_BANDA FOREIGN KEY(B_SONORA) REFERENCES BANDAS(CODS_BS),
  CONSTRAINT FK_ALQUILA_B_SOCIO FOREIGN KEY(SOCIO) REFERENCES SOCIOS(DNI)
);
GO

/*
  ALQUILA_P
  Tabla GENERADA a partir de PELICULAS
  * Se agrega la columna para el SOCIO
  * CONSTRAINT FK_ALQUILA_P_PELICULA
    Llave foranea que hace referencia a la relacion con PELICULAS
  * CONSTRAINT FK_ALQUILA_P_SOCIO
    Llave foranea que hace referencia a la relacion con SOCIOS
*/
SELECT NUM_PEL AS NUM_PEL INTO ALQUILA_P FROM PELICULAS;
GO
ALTER TABLE ALQUILA_P ADD SOCIO VARCHAR(100);
GO
ALTER TABLE ALQUILA_P ADD CONSTRAINT FK_ALQUILA_P_PELICULA FOREIGN KEY(NUM_PEL) REFERENCES PELICULAS(NUM_PEL);
GO
ALTER TABLE ALQUILA_P ADD CONSTRAINT FK_ALQUILA_P_SOCIO FOREIGN KEY(SOCIO) REFERENCES SOCIOS(DNI);
GO
